# --- START OF FILE main.py ---

import asyncio
import os
import logging
from dotenv import load_dotenv
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command

from langchain_community.utilities import SQLDatabase
from langchain_anthropic import ChatAnthropic
from langchain_community.agent_toolkits import create_sql_agent
from langchain_core.prompts import ChatPromptTemplate

from langchain.callbacks.base import BaseCallbackHandler
from langchain.schema import AgentAction, AgentFinish, LLMResult

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
load_dotenv()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
DB_FILE = 'qa.db'
ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
LOG_FILE = "llm_requests.log"

if not ANTHROPIC_API_KEY or not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ANTHROPIC_API_KEY –∏ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

# ... (–ö–ª–∞—Å—Å FileCallbackHandler –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
class FileCallbackHandler(BaseCallbackHandler):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞, —É–¥–µ–ª—è—è –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞–º –∫ LLM."""
    def __init__(self, filename: str = LOG_FILE):
        self.file = open(filename, 'a', encoding='utf-8')

    def on_chain_start(self, serialized: dict, inputs: dict, **kwargs) -> None:
        self.file.write(f"\n\n---\n\n## üöÄ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        user_input = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ö–æ–¥–Ω–æ–π –∑–∞–ø—Ä–æ—Å"
        if isinstance(inputs, dict):
            user_input = inputs.get('input', user_input)
        self.file.write(f"**–í—Ö–æ–¥–Ω–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n```\n{user_input}\n```\n")
        self.file.flush()

    def on_llm_start(self, serialized: dict, prompts: list[str], **kwargs) -> None:
        self.file.write(f"\n### ‚û°Ô∏è –ó–∞–ø—Ä–æ—Å –∫ LLM\n\n")
        for i, prompt in enumerate(prompts):
            self.file.write(f"**–ü—Ä–æ–º–ø—Ç {i+1}:**\n```text\n{prompt}\n```\n")
        self.file.flush()

    def on_llm_end(self, response: LLMResult, **kwargs) -> None:
        self.file.write(f"\n### ‚¨ÖÔ∏è –û—Ç–≤–µ—Ç –æ—Ç LLM\n\n")
        try:
            raw_response = response.generations[0][0].text
            self.file.write(f"**–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ (raw):**\n```text\n{raw_response}\n```\n")
        except (AttributeError, IndexError):
            self.file.write(f"**–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ—Ç–≤–µ—Ç –∏–∑ –æ–±—ä–µ–∫—Ç–∞ LLMResult.**\n")
        self.file.flush()

    def on_agent_action(self, action: AgentAction, **kwargs) -> None:
        self.file.write(f"\n### üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –ê–≥–µ–Ω—Ç–∞\n\n")
        self.file.write(f"**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:** `{action.tool}`\n")
        self.file.write(f"**–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (SQL):**\n```sql\n{action.tool_input}\n```\n")
        self.file.flush()

    def on_tool_end(self, output: str, **kwargs) -> None:
        self.file.write(f"\n### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n\n")
        self.file.write(f"**–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:**\n```\n{output}\n```\n")
        self.file.flush()

    def on_agent_finish(self, finish: AgentFinish, **kwargs) -> None:
        self.file.write(f"\n### ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –û—Ç–≤–µ—Ç –ê–≥–µ–Ω—Ç–∞\n\n")
        self.file.write(f"**–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n```\n{finish.return_values.get('output')}\n```\n")
        self.file.flush()

    def on_chain_end(self, outputs: dict, **kwargs) -> None:
        self.file.write(f"\n--- üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---\n")
        self.file.flush()

try:
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è '–¥–≤–∏–≥–∞—Ç–µ–ª—è' –±–æ—Ç–∞...")
    db = SQLDatabase.from_uri(f"sqlite:///{DB_FILE}")
    llm = ChatAnthropic(model="claude-3-5-sonnet-20240620", temperature=0)

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    CUSTOM_PROMPT_TEMPLATE = """
–¢—ã ‚Äî –∞–≥–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å SQL –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï.
–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –æ–±—Ä–∞—â–∞–µ—à—å—Å—è, ‚Äî —ç—Ç–æ –ª–æ–≥ —á–∞—Ç–∞ –≤ Telegram (–í–∞–ª–µ–Ω—Å–∏—è, –ò—Å–ø–∞–Ω–∏—è).
–¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –¢—ã –¥–æ–ª–∂–µ–Ω –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –Ω–µ–π.
–ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç–≤–æ–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –Ω–µ –Ω–∞—à–ª–æ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞.

**–í–ê–ñ–ù–û–ï –ü–†–ê–í–ò–õ–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –û–¢–í–ï–¢–ê:**
–¢–≤–æ–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π:
1.  **–°–≤–æ–¥–∫–∞:** –ö—Ä–∞—Ç–∫–∏–π, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
2.  **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** –ü–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "**–ò—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**" –ø—Ä–∏–≤–µ–¥–∏ 2-3 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä—ã—Ö —Å–¥–µ–ª–∞–Ω–∞ —Å–≤–æ–¥–∫–∞. –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–∫: `–ê–≤—Ç–æ—Ä (–î–∞—Ç–∞): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`.

–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º:
{tools}

–ò—Å–ø–æ–ª—å–∑—É–π –°–¢–†–û–ì–û —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:

Question: the input question you must answer
Thought: —Ç–≤–æ–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
Action: the action to take, should be one of [{tool_names}]
Action Input: the input to the action
Observation: the result of the action
... (–≠—Ç–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å Thought/Action/Action Input/Observation –º–æ–∂–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è N —Ä–∞–∑)
Thought: –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É—é –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å–ª–µ–¥—É—è –ø—Ä–∞–≤–∏–ª—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
Final Answer: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Å–≤–æ–¥–∫–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

–ù–∞—á–∏–Ω–∞–π!

Question: {input}
Thought:{agent_scratchpad}
"""
    
    prompt = ChatPromptTemplate.from_template(CUSTOM_PROMPT_TEMPLATE)
    agent_executor = create_sql_agent(
        llm=llm,
        db=db,
        prompt=prompt,
        verbose=True,
        handle_parsing_errors=True
    )

    logging.info("'–î–≤–∏–≥–∞—Ç–µ–ª—å' –±–æ—Ç–∞ (SQL-–∞–≥–µ–Ω—Ç —Å Claude –∏ –≥–∏–±—Ä–∏–¥–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º) —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SQL-–∞–≥–µ–Ω—Ç–∞! –û—à–∏–±–∫–∞: {e}")
    agent_executor = None

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ChatGeist, –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n"
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö—Ç–æ —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫?' –∏–ª–∏ '–ü–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ò–≤–∞–Ω–∞'."
    )

@dp.message()
async def handle_message(message: types.Message):
    if not agent_executor:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
        return
    if not message.text:
        return

    thinking_message = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

    try:
        file_logger = FileCallbackHandler()
        response = await agent_executor.ainvoke(
            {"input": message.text},
            {"callbacks": [file_logger]}
        )
        final_answer = response.get('output', "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ—Ç–≤–µ—Ç.")

    except Exception as e:
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π)
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∞–≥–µ–Ω—Ç–æ–º: {e}")
        error_text = str(e)
        if "Could not parse LLM output:" in error_text:
            logging.warning("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –∏–∑–≤–ª–µ–∫–∞—é –æ—Ç–≤–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏...")
            raw_answer = error_text.split("Could not parse LLM output:")[1]
            final_answer = raw_answer.split("For troubleshooting, visit:")[0].strip()
        elif "quota" in error_text.lower() or "limit" in error_text.lower():
            final_answer = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
        else:
            final_answer = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞."

    await thinking_message.edit_text(final_answer)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    if agent_executor is None:
        logging.critical("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    else:
        logging.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
        asyncio.run(main())

# --- END OF FILE main.py ---